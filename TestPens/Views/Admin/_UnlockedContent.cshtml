@using TestPens.Models.Simple
@using TestPens.Service.Abstractions
@model (Permissions, Dictionary<Tier, List<PersonModel>>, string)

<section class="editable-tierlist">
    @foreach (var tierGroup in Model.Item2)
    {
        (string mainColor, string secColor) = tierGroup.Key.GetColors();
        <style>
            .tier-person[data-tier="@tierGroup.Key"] .tier-circle {
            background: linear-gradient(90deg, @mainColor, @secColor);
            }

            .tier-title[data-tier="@tierGroup.Key"] {
            background: linear-gradient(90deg, @mainColor, @secColor );
            }
        </style>
        <section class="tier-block">
            <h2 class="tier-title" data-tier="@tierGroup.Key">
                @tierGroup.Key.GetName() Tier
            </h2>
            <ul class="tier-people" data-tier="@tierGroup.Key">

                @{

                    int it = 1;
                    foreach (var person in tierGroup.Value)
                    {
                        <li class="tier-person" data-tier="@tierGroup.Key" data-index="@it">
                            <span class="tier-circle"></span>
                            @person.Nickname
                        </li>
                        it++;
                    }
                }
            </ul>
        </section>
    }
</section>

<div class="action-buttons">
    <button id="saveChanges" class="save-button">Сохранить изменения</button>
    <form id="resetForm" method="GET" action="/">
        <button type="submit" class="reset-button">Сбросить изменения</button>
    </form>
</div>

<script>
    const authToken = '@Model.Item3';
</script>

@{
    if (Model.Item1.HasFlag(Permissions.ChangePositions))
    {
        <script src="/js/Sortable.min.js">
        </script>
        <script src="/js/adminPanel.js">
        </script>
    }
}